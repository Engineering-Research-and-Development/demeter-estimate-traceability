/*
 * Random Forest Configurator
 * 
 * Author: Luigi di Corrado
 * Mail: luigi.dicorrado@eng.it
 * Date: 12/10/2020
 * Company: Engineering Ingegneria Informatica S.p.A.
 * 
 * Set or Load configuration for the Random Forest Module
 * 
 * - int 	 randomState  		Random state is used on random forest module to choose random row 
 * 								on test phase
 * - int 	 estimators   		Estimators are the number of trees generated by the random forest 
 * 								during training
 * - String  configFilePath     Path containing the rfConf.properties file to be loaded
 * 								on random forest configuration function
 * - String  workDir			Path to select the working directory of python modules
 * 
 * 
 * 
 * Method      : setConfiguration
 * 
 * Description : Change and save the new value of random state and estimators settings into the 
 * 				 serviceConf.properties file
 * 
 * Parameters  : int randomState    
 * 				 int estimators   
 * 
 * Return      : void
 * 
 * 
 * 
 * Method      : loadConfiguration
 * 
 * Description : Load all random forest settings
 * 
 * Parameters  :     
 * 
 * Return      : void
 */

package it.eng.is3lab.traceability.pyplugin;

import java.io.File;
import java.util.ResourceBundle;

import org.apache.commons.configuration.ConfigurationException;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class RFConfigurator {
	private static final Logger log = LogManager.getLogger(RFConfigurator.class);
	private int randomState;
	private int estimators;
	private String configFilePath;
	private String workDir;
	
	public String getConfigFilePath() {
		return configFilePath;
	}

	private void setConfigFilePath(String configFilePath) {
		this.configFilePath = configFilePath;
	}

	public String getWorkDir() {
		return workDir;
	}

	private void setWorkDir(String workDir) {
		this.workDir = workDir;
	}

	private void setRandomState(int rs) {
		this.randomState = rs;
	}
	
	private void setEstimators(int esti) {
		this.estimators = esti;
	}
	
	public int getRandomState() {
		return randomState;
	}

	public int getEstimators() {
		return estimators;
	}

	public void setConfiguration(int randomState, int estimators) throws ConfigurationException {
		log.debug("Setting configuration values...");
		File propertiesFile = new File(RFConfigurator.class.getClassLoader().getResource("resources/serviceConf.properties").getFile());
		PropertiesConfiguration config = new PropertiesConfiguration(propertiesFile);           
		config.setProperty("milkquality.randomForest.trainingSettings.randomState", randomState);
		log.debug("Random state new value: "+randomState);
		config.setProperty("milkquality.randomForest.trainingSettings.estimators", estimators);
		log.debug("Estimators new value: "+estimators);
		config.save();
		log.debug("Configuration file saved!");
	}
	
	public void loadConfiguration() throws ConfigurationException {
		log.debug("Loading configuration values...");
		ResourceBundle configuration = ResourceBundle.getBundle("resources/serviceConf");
		this.setRandomState(Integer.parseInt(configuration.getString("milkquality.randomForest.trainingSettings.randomState")));
		log.debug("Random state value: "+this.getRandomState());
		this.setEstimators(Integer.parseInt(configuration.getString("milkquality.randomForest.trainingSettings.estimators")));
		log.debug("Estimators value: "+this.getEstimators());
		String rfResources = System.getenv(configuration.getString("milkquality.randomForest.resources"));
		log.debug("Random forest resources path: "+rfResources);
		String configFile = configuration.getString("milkquality.randomForest.configFile");
		log.debug("Random forest config file: "+configFile);
		String rfConfigFilePath = rfResources+configFile;
		this.setConfigFilePath(rfConfigFilePath);
		log.debug("Random forest config file path: "+rfConfigFilePath);
		this.setWorkDir(System.getenv(configuration.getString("milkquality.workDirectory")));
		log.debug("Random forest work directory: "+this.getWorkDir());
	}

}